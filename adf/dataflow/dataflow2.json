{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Employees_dataflow",
						"type": "DatasetReference"
					},
					"name": "Employees"
				},
				{
					"dataset": {
						"referenceName": "Employeeprojects_dataflow",
						"type": "DatasetReference"
					},
					"name": "Employeeprojects"
				},
				{
					"dataset": {
						"referenceName": "Projects_dataflow",
						"type": "DatasetReference"
					},
					"name": "projects"
				},
				{
					"dataset": {
						"referenceName": "Departments_dataflow",
						"type": "DatasetReference"
					},
					"name": "Departments"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dataflow2_output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "pivot1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as integer,",
				"          Name as string,",
				"          DepartmentID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employees",
				"source(output(",
				"          EmployeeID as integer,",
				"          ProjectID as integer,",
				"          HoursWorked as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employeeprojects",
				"source(output(",
				"          ProjectID as integer,",
				"          ProjectName as string,",
				"          DepartmentID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> projects",
				"source(output(",
				"          DepartmentID as integer,",
				"          DepartmentName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Departments",
				"Employees, Departments join(Employees@DepartmentID == Departments@DepartmentID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"Employeeprojects, projects join(Employeeprojects@ProjectID == projects@ProjectID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join1, join2 join(Employees@EmployeeID == Employeeprojects@EmployeeID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          EmployeeID = Employees@EmployeeID,",
				"          Name,",
				"          DepartmentID = Employees@DepartmentID,",
				"          DepartmentID = Departments@DepartmentID,",
				"          DepartmentName,",
				"          EmployeeID = Employeeprojects@EmployeeID,",
				"          ProjectID = Employeeprojects@ProjectID,",
				"          HoursWorked,",
				"          ProjectID = projects@ProjectID,",
				"          ProjectName,",
				"          DepartmentID = projects@DepartmentID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(HoursWorked>5) ~> filter1",
				"filter1 pivot(groupBy(DepartmentName,",
				"          ProjectName),",
				"     pivotBy(ProjectName),",
				"     {} = sum(HoursWorked),",
				"     columnNaming: 'proj_$V$N_hoursworked',",
				"     lateral: false) ~> pivot1",
				"pivot1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as string,",
				"          ServiceName as string,",
				"          Category as string,",
				"          PrimaryUse as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}